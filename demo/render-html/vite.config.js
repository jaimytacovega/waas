import { defineConfig } from 'vite'
import jsconfigPaths from 'vite-jsconfig-paths'
import { listFiles, writeFile, removeManifest } from '../../file.js'

const getURLPath = ({ path }) => (new URL(`${path}`, import.meta.url))?.pathname


const prebuild = async () => {
    const componentFilePaths = await listFiles({ path: 'src/components/' })
    if (componentFilePaths?.err) return { paths: {} }

    const actionImportCode = `
        ${componentFilePaths?.map((path, index) => {
            if (!path?.includes('.action.')) return ''
            const importPath = path?.replace('src/components', './components')?.replace('.js', '')
            return `import * as A${index} from '${importPath}'\nconsole.log(A${index})\n`
        })?.join('')
            }
            /*
        import * as X1 from '@scripts/lib/event.lib'
        import * as X2 from '@scripts/lib/html.lib'
        import * as X3 from '@scripts/lib/pwa.lib'
        import * as X4 from '@scripts/lib/router.lib'
        import * as X5 from '@scripts/lib/util.lib'
        import * as X6 from '@scripts/lib/worker.lib'
        console.log(X1)
        console.log(X2)
        console.log(X3)
        console.log(X4)
        console.log(X5)
        console.log(X6)
        */

        
        // import * as X1 from '../../../event.js'
        import * as X2 from '../../../html.js'
        // import * as X3 from '../../../pwa.js'
        import * as X4 from '../../../router.js'
        import * as X5 from '../../../util.js'
        import * as X6 from '../../../worker.js'
        // console.log(X1)
        console.log(X2)
        // console.log(X3)
        console.log(X4)
        console.log(X5)
        console.log(X6)
    `

    const actionsFilePath = 'src/_actions_autogenerated.js'

    await writeFile({ code: actionImportCode, filePath: 'src/_actions_autogenerated.js' })

    const paths = {
        ...componentFilePaths?.reduce((acc, componentFilePath) => {
            if (componentFilePath?.endsWith('.js') && !componentFilePath?.includes('.action.')) return acc
            const fileName = componentFilePath?.split('/')?.pop()
            const componentName = fileName?.replace(/\.[^.]+$/, '')
            acc[componentName] = getURLPath({ path: componentFilePath })
            return acc
        }, {}),

        actionsFilePath: getURLPath({ path: actionsFilePath }),

        'sw.worker': getURLPath({ path: '/src/sw.worker.js' }),
    }

    const urlPath = getURLPath({ path: '/src/sw.worker.js' })
    return { paths }
}

const { paths } = await prebuild()

export default defineConfig({
    define: {
        __ENV__: `'${process.env.ENV}'`,
        __BUILD_TIME__: `'${new Date().toISOString()}'`,
        __APP_NAME__: `'compy'`,
        __REGION__: `'${process.env.REGION}'`,
    },
    plugins: [
        jsconfigPaths(),
        {
            name: 'postbuild-command',
            closeBundle: async () => {
                const distFilePaths = await listFiles({ path: 'dist/' })
                const cleanedDistFilePaths = distFilePaths?.filter((path) => {
                    return !path?.endsWith('.DS_Store')
                })
                await writeFile({ code: JSON.stringify(cleanedDistFilePaths), filePath: 'dist/dist.json' })
            },
        },
        {
            name: 'move-manifest',
            writeBundle() {
                // renameSync(
                //     resolve(__dirname, 'dist/.vite/manifest.json'),
                //     resolve(__dirname, 'dist/manifest.json')
                // )
                // removeManifest()
            }
        }
    ],
    build: {
        outDir: './dist',
        manifest: true,
        emptyOutDir: true,
        minify: ['prod'].includes(process.env.ENV),
        rollupOptions: {
            input: {
                ...paths,
            },
            output: {
                entryFileNames: `[name].js`,
                chunkFileNames: `[name].js`,
                assetFileNames: `[name].component.[ext]`,
            },
        },
    },
})